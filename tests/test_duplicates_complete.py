#!/usr/bin/env python3
"""
üìç test_duplicates_complete.py
Test complet du syst√®me de d√©tection de doublons avec SSE
"""

import requests
import json
import base64
import time
import threading
from pathlib import Path
from PIL import Image
import numpy as np
import io

# Configuration
SERVER_URL = "http://localhost:5000"

class Colors:
    GREEN = '\033[92m'
    RED = '\033[91m'
    YELLOW = '\033[93m'
    BLUE = '\033[94m'
    MAGENTA = '\033[95m'
    CYAN = '\033[96m'
    END = '\033[0m'


def create_test_images():
    """Cr√©er des images de test avec diff√©rents niveaux de similarit√©"""
    print(f"\n{Colors.YELLOW}üì∏ Cr√©ation d'images de test...{Colors.END}")
    
    test_images = []
    
    # Image originale
    img1 = Image.new('RGB', (800, 600), color='red')
    # Ajouter un carr√© blanc
    for x in range(100, 200):
        for y in range(100, 200):
            img1.putpixel((x, y), (255, 255, 255))
    
    # Image tr√®s similaire (petit changement)
    img2 = img1.copy()
    # Ajouter un petit point bleu
    for x in range(300, 310):
        for y in range(300, 310):
            img2.putpixel((x, y), (0, 0, 255))
    
    # Image moyennement similaire (changement de couleur)
    img3 = Image.new('RGB', (800, 600), color='orange')
    # M√™me carr√© blanc
    for x in range(100, 200):
        for y in range(100, 200):
            img3.putpixel((x, y), (255, 255, 255))
    
    # Image diff√©rente
    img4 = Image.new('RGB', (800, 600), color='blue')
    # Cercle approximatif
    center_x, center_y = 400, 300
    radius = 100
    for x in range(800):
        for y in range(600):
            if (x - center_x)**2 + (y - center_y)**2 < radius**2:
                img4.putpixel((x, y), (255, 255, 0))
    
    # Image identique √† img1 (vrai doublon)
    img5 = img1.copy()
    
    # Convertir en base64
    for i, img in enumerate([img1, img2, img3, img4, img5], 1):
        buffer = io.BytesIO()
        img.save(buffer, format='JPEG', quality=95)
        img_data = buffer.getvalue()
        
        img_base64 = base64.b64encode(img_data).decode('utf-8')
        test_images.append({
            'asset_id': f'test-asset-{i:03d}',
            'filename': f'test_image_{i}.jpg',
            'base64': f"data:image/jpeg;base64,{img_base64}",
            'data': img_data,
            'description': [
                'Original rouge avec carr√© blanc',
                'Similaire √† 1 (petit point bleu ajout√©)',
                'Orange avec carr√© blanc (couleur diff√©rente)',
                'Compl√®tement diff√©rent (bleu avec cercle)',
                'Doublon exact de 1'
            ][i-1]
        })
    
    print(f"{Colors.GREEN}‚úÖ {len(test_images)} images de test cr√©√©es{Colors.END}")
    return test_images


def test_endpoint(method, endpoint, description, data=None, timeout=30):
    """Tester un endpoint"""
    print(f"\n{Colors.YELLOW}Test:{Colors.END} {description}")
    print(f"Endpoint: {method} {endpoint}")
    
    try:
        url = f"{SERVER_URL}{endpoint}"
        
        if method == "GET":
            response = requests.get(url, timeout=timeout)
        elif method == "POST":
            response = requests.post(url, json=data, timeout=timeout)
        
        if response.status_code == 200:
            print(f"{Colors.GREEN}‚úÖ Success{Colors.END} (HTTP {response.status_code})")
            return response.json()
        else:
            print(f"{Colors.RED}‚ùå Failed{Colors.END} (HTTP {response.status_code})")
            print(response.text)
            return None
            
    except Exception as e:
        print(f"{Colors.RED}‚ùå Error:{Colors.END} {e}")
        return None


def listen_sse_duplicates(request_id, duration=60):
    """√âcouter le flux SSE pour la d√©tection de doublons"""
    print(f"\n{Colors.BLUE}üì° √âcoute SSE pour {request_id}...{Colors.END}")
    
    url = f"{SERVER_URL}/api/duplicates/find-similar-stream/{request_id}"
    
    try:
        response = requests.get(url, stream=True, headers={
            'Accept': 'text/event-stream',
            'Cache-Control': 'no-cache'
        }, timeout=duration)
        
        start_time = time.time()
        final_result = None
        
        for line in response.iter_lines():
            if time.time() - start_time > duration:
                print("‚è∞ Timeout SSE")
                break
                
            if line:
                line_str = line.decode('utf-8')
                if line_str.startswith('data:'):
                    try:
                        data = json.loads(line_str[5:])
                        event_type = data.get('event', 'unknown')
                        
                        if event_type == 'connected':
                            print(f"{Colors.CYAN}üîó {data.get('message', 'Connect√©')}{Colors.END}")
                            
                        elif event_type == 'progress':
                            progress_data = data.get('data', {})
                            progress = progress_data.get('progress', 0)
                            details = progress_data.get('details', '')
                            step = progress_data.get('step', '')
                            
                            # Barre de progression visuelle
                            bar_length = 30
                            filled = int(bar_length * progress / 100)
                            bar = '‚ñà' * filled + '‚ñë' * (bar_length - filled)
                            
                            print(f"\r{Colors.CYAN}[{bar}] {progress}% - {step}: {details}{Colors.END}", end='')
                            
                        elif event_type == 'result':
                            print()  # Nouvelle ligne apr√®s progress
                            step = data['data'].get('step', 'unknown')
                            result_data = data['data'].get('result', {})
                            
                            if step == 'download':
                                print(f"{Colors.GREEN}üì• T√©l√©chargement: {result_data.get('downloaded')}/{result_data.get('total')} images{Colors.END}")
                            else:
                                print(f"{Colors.GREEN}üìä R√©sultat [{step}]: {json.dumps(result_data, indent=2)}{Colors.END}")
                            
                        elif event_type == 'complete':
                            print()  # Nouvelle ligne
                            print(f"{Colors.GREEN}‚úÖ Analyse termin√©e!{Colors.END}")
                            final_result = data.get('data', {})
                            
                            # Afficher le r√©sum√©
                            if 'groups' in final_result:
                                groups = final_result['groups']
                                print(f"\n{Colors.MAGENTA}üìä R√©sum√© des doublons:{Colors.END}")
                                print(f"  ‚Ä¢ Groupes trouv√©s: {len(groups)}")
                                print(f"  ‚Ä¢ Images dupliqu√©es: {final_result.get('total_duplicates', 0)}")
                                print(f"  ‚Ä¢ Seuil utilis√©: {final_result.get('threshold', 0.85):.0%}")
                                
                                # D√©tails des groupes
                                for i, group in enumerate(groups):
                                    print(f"\n  {Colors.YELLOW}Groupe {i+1}:{Colors.END}")
                                    print(f"    ‚Ä¢ Similarit√© moyenne: {group['similarity_avg']:.1%}")
                                    print(f"    ‚Ä¢ Images ({len(group['images'])}):")
                                    for img in group['images']:
                                        print(f"      - {img.get('asset_id', 'N/A')} ({img.get('filename', 'N/A')})")
                            break
                            
                        elif event_type == 'error':
                            print()  # Nouvelle ligne
                            print(f"{Colors.RED}‚ùå Erreur: {data['data'].get('error', 'Erreur inconnue')}{Colors.END}")
                            break
                            
                        elif event_type == 'heartbeat':
                            # Ignorer les heartbeats
                            pass
                            
                    except json.JSONDecodeError:
                        if line_str.strip():  # Ignorer les lignes vides
                            print(f"\nRaw SSE: {line_str}")
                        
        return final_result
        
    except Exception as e:
        print(f"\n{Colors.RED}‚ùå SSE Error:{Colors.END} {e}")
        return None


def simulate_immich_endpoint(test_images):
    """Simuler un endpoint Immich pour les tests"""
    from flask import Flask, jsonify, send_file
    import threading
    
    app = Flask(__name__)
    
    # Mapping asset_id -> image data
    assets = {img['asset_id']: img for img in test_images}
    
    @app.route('/api/asset/<asset_id>/original', methods=['GET'])
    def get_asset_original(asset_id):
        if asset_id in assets:
            img_data = assets[asset_id]['data']
            return send_file(
                io.BytesIO(img_data),
                mimetype='image/jpeg',
                as_attachment=True,
                download_name=f"{asset_id}.jpg"
            )
        return jsonify({'error': 'Asset not found'}), 404
    
    @app.route('/api/assets/<asset_id>', methods=['GET'])
    def get_asset_info(asset_id):
        if asset_id in assets:
            return jsonify({
                'id': asset_id,
                'originalFileName': assets[asset_id]['filename'],
                'fileCreatedAt': '2024-01-01T12:00:00Z',
                'exifInfo': {'fileSizeInByte': len(assets[asset_id]['data'])}
            })
        return jsonify({'error': 'Asset not found'}), 404
    
    # D√©marrer le serveur dans un thread
    thread = threading.Thread(
        target=lambda: app.run(port=3001, debug=False),
        daemon=True
    )
    thread.start()
    time.sleep(2)  # Attendre que le serveur d√©marre
    print(f"{Colors.CYAN}üé≠ Serveur Immich simul√© d√©marr√© sur le port 3001{Colors.END}")


def main():
    """Tests principaux"""
    print(f"{Colors.MAGENTA}üß™ Test Complet - D√©tection de Doublons avec SSE{Colors.END}")
    print("=" * 60)
    
    # 1. Cr√©er les images de test
    test_images = create_test_images()
    
    # 2. D√©marrer le serveur Immich simul√© (optionnel)
    # simulate_immich_endpoint(test_images)
    
    # 3. Health check
    health = test_endpoint("GET", "/api/health", "Health Check")
    
    if not health:
        print(f"\n{Colors.RED}‚ö†Ô∏è  Le serveur n'est pas accessible!{Colors.END}")
        return
    
    # 4. V√©rifier le status du service de doublons
    print(f"\n{Colors.YELLOW}=== TEST STATUS SERVICE ==={Colors.END}")
    
    status = test_endpoint("GET", "/api/duplicates/status", "Status d√©tection doublons")
    
    if status and status.get('clip_available'):
        print(f"{Colors.GREEN}‚úÖ CLIP disponible{Colors.END}")
        model_info = status.get('model_info', {})
        print(f"  ‚Ä¢ Mod√®le: {model_info.get('model_name', 'N/A')}")
        print(f"  ‚Ä¢ Dimension embeddings: {model_info.get('embedding_dimension', 'N/A')}")
    else:
        print(f"{Colors.RED}‚ùå CLIP non disponible!{Colors.END}")
        print("Installer avec: pip install sentence-transformers")
        return
    
    # 5. Test synchrone (petit lot)
    print(f"\n{Colors.YELLOW}=== TEST SYNCHRONE (3 images) ==={Colors.END}")
    
    small_batch = [img['asset_id'] for img in test_images[:3]]
    
    sync_result = test_endpoint("POST", "/api/duplicates/find-similar", 
                               "D√©tection synchrone", {
        "selected_asset_ids": small_batch,
        "threshold": 0.80
    })
    
    if sync_result and sync_result.get('success'):
        print(f"Groupes trouv√©s: {sync_result.get('total_groups', 0)}")
    
    # 6. Test asynchrone avec SSE (toutes les images)
    print(f"\n{Colors.YELLOW}=== TEST ASYNCHRONE SSE (5 images) ==={Colors.END}")
    
    request_id = f"test-dup-{int(time.time())}"
    all_asset_ids = [img['asset_id'] for img in test_images]
    
    # Afficher les images test√©es
    print(f"\n{Colors.CYAN}Images √† analyser:{Colors.END}")
    for img in test_images:
        print(f"  ‚Ä¢ {img['asset_id']}: {img['description']}")
    
    async_start = test_endpoint("POST", "/api/duplicates/find-similar-async",
                               "D√©marrage d√©tection async", {
        "request_id": request_id,
        "selected_asset_ids": all_asset_ids,
        "threshold": 0.75,  # Seuil plus bas pour voir plus de groupes
        "group_by_time": False  # Pas de fen√™tre temporelle
    })
    
    if async_start and async_start.get('success'):
        print(f"Request ID: {request_id}")
        print(f"SSE URL: {async_start['sse_url']}")
        
        # √âcouter le flux SSE
        final_result = listen_sse_duplicates(request_id, 60)
        
        # Analyse des r√©sultats
        if final_result and final_result.get('groups'):
            print(f"\n{Colors.YELLOW}=== ANALYSE DES R√âSULTATS ==={Colors.END}")
            
            expected_groups = [
                "Images 1 et 5 (doublons exacts)",
                "Images 1, 2 et 5 (tr√®s similaires)",
                "Possiblement 3 avec 1,2,5 si seuil bas"
            ]
            
            print(f"\n{Colors.CYAN}Groupes attendus:{Colors.END}")
            for exp in expected_groups:
                print(f"  ‚Ä¢ {exp}")
    
    # 7. Test avec diff√©rents seuils
    print(f"\n{Colors.YELLOW}=== TEST SEUILS MULTIPLES ==={Colors.END}")
    
    thresholds = [0.95, 0.85, 0.70]
    
    for threshold in thresholds:
        print(f"\n{Colors.CYAN}Seuil: {threshold:.0%}{Colors.END}")
        
        result = test_endpoint("POST", "/api/duplicates/find-similar",
                              f"Test seuil {threshold:.0%}", {
            "selected_asset_ids": all_asset_ids,
            "threshold": threshold
        }, timeout=60)
        
        if result and result.get('success'):
            groups = result.get('groups', [])
            print(f"  ‚Üí {len(groups)} groupes trouv√©s")
            for group in groups:
                img_ids = [img['asset_id'] for img in group['images']]
                print(f"    ‚Ä¢ {', '.join(img_ids)} (sim: {group['similarity_avg']:.1%})")
    
    # 8. Test analyse d'album (simulation)
    print(f"\n{Colors.YELLOW}=== TEST ANALYSE ALBUM ==={Colors.END}")
    
    album_result = test_endpoint("POST", "/api/duplicates/analyze-album/test-album-001",
                                "Analyse album complet", {
        "threshold": 0.80,
        "group_by_time": True,
        "time_window_hours": 24
    })
    
    if album_result and album_result.get('success'):
        print(f"Analyse d√©marr√©e: {album_result['request_id']}")
    
    # 9. Statistiques finales
    final_stats = test_endpoint("GET", "/api/duplicates/status", "Statistiques finales")
    
    if final_stats:
        stats = final_stats.get('stats', {})
        print(f"\n{Colors.MAGENTA}üìä Statistiques finales:{Colors.END}")
        print(f"  ‚Ä¢ Images trait√©es: {stats.get('total_images_processed', 0)}")
        print(f"  ‚Ä¢ Groupes trouv√©s: {stats.get('total_groups_found', 0)}")
        print(f"  ‚Ä¢ Taux de cache: {stats.get('cache_hit_rate', '0%')}")
    
    print(f"\n{Colors.GREEN}üéâ Tests termin√©s !{Colors.END}")


if __name__ == "__main__":
    main()